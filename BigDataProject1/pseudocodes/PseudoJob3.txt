Class FoodAssocWritable
	- thisFood				:Text
	- otherFoods			:TextArrayWritable
	
Class FoodPairWritable
	- leftFood				:Text
	- rightFood				:Text
	- supportCount          :IntWritable
	
In FoodPairWritable bisogna per forza implementare hashCode
ATTENZIONE: bisogna evitare che l'hashCode renda uguali i seguenti due casi:
	- FoodPairWritable("pane", "vino")
	- FoodPairWritable("vino", "pane")
	
Class SupportConfidenceWritable
	- supportPercentage		:Text (nel formato %d\\%)
	- confidencePercentage	:Text (nel formato %d\\%)

Creare i seguenti gruppi di Counter 
https://hadoop.apache.org/docs/r2.6.3/api/org/apache/hadoop/mapred/Counters.html
	- per gli scontrini totali: context.getCounter("totale", "contatore")
	- per ogni tipo di cibo: context.getCounter("cibi", "<nome cibo>")

Per maggiori info:
https://hadoop.apache.org/docs/r2.5.2/api/org/apache/hadoop/mapreduce/TaskAttemptContext.html#getCounter(java.lang.String,%20java.lang.String)

//Per ogni "uova,latte,pane,vino" emetti ogni possibile coppia di cibi
//uova -> latte, uova -> pane, uova -> vino
//latte -> uova, latte -> pane, latte -> vino
//ecc...
map(key, row)
	//esempio pairs[]: a partire da "uova,latte,pane,vino" verrebbe generato il
	//seguente array:
	//[uova,[latte,pane,vino]], [latte,[uova,pane,vino]], [pane,[uova, latte,vino]], ecc...
	foodAssocs[] = generateFoodAssocs(row);
	
	foreach foodAssoc in foodAssocs
		incCounter("totale", "contatore") //incremento il numero totale di scontrini
		incCounter("cibi", foodAssoc.getThisFood()) //incremento il numero di scontrini per cibo
		
		foreach otherFood in foodAssoc.getOtherFoods()
			foodPair = new FoodPairWritable(foodAssoc.getThisFood(), foodOther)
			Emit(foodPair, 1) //emetti (k: foodPair, v: 1)
			//NO --> Emit(foodAssoc.getFoodThis(), foodOthers) //emetti (k: foodThis, v: foodOther corrente) 

reduce(foodPair, sums)
	total = 0
	
	foreach sum in sums
		total += sum
	
	//punto (i): n째 scontrini con coppia <cibo1, cibo2>/n째 scontrini totali
	supportPercentage = sum/getCounter("totale", "contatore")
	
	//punto (ii): n째 scontrini con coppia <cibo1, cibo2>/n째 scontrini con <cibo1>
	confidencePercentage =sum/getCounter("cibi", foodPair.get)
	
	percentPair = new PercentagePairWritable(supportPercentage, confidencePercentage)
	Emit(foodPair,percentgePair)
	